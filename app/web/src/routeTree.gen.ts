/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AuthenticatedRouteImport } from './routes/_authenticated'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthenticatedOrpcTodoRouteImport } from './routes/_authenticated/orpc-todo'
import { Route as AuthenticatedClerkRouteImport } from './routes/_authenticated/clerk'

const AuthenticatedRoute = AuthenticatedRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedOrpcTodoRoute = AuthenticatedOrpcTodoRouteImport.update({
  id: '/orpc-todo',
  path: '/orpc-todo',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedClerkRoute = AuthenticatedClerkRouteImport.update({
  id: '/clerk',
  path: '/clerk',
  getParentRoute: () => AuthenticatedRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/clerk': typeof AuthenticatedClerkRoute
  '/orpc-todo': typeof AuthenticatedOrpcTodoRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/clerk': typeof AuthenticatedClerkRoute
  '/orpc-todo': typeof AuthenticatedOrpcTodoRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/_authenticated/clerk': typeof AuthenticatedClerkRoute
  '/_authenticated/orpc-todo': typeof AuthenticatedOrpcTodoRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/clerk' | '/orpc-todo'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/clerk' | '/orpc-todo'
  id:
    | '__root__'
    | '/'
    | '/_authenticated'
    | '/_authenticated/clerk'
    | '/_authenticated/orpc-todo'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/orpc-todo': {
      id: '/_authenticated/orpc-todo'
      path: '/orpc-todo'
      fullPath: '/orpc-todo'
      preLoaderRoute: typeof AuthenticatedOrpcTodoRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/clerk': {
      id: '/_authenticated/clerk'
      path: '/clerk'
      fullPath: '/clerk'
      preLoaderRoute: typeof AuthenticatedClerkRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
  }
}

interface AuthenticatedRouteChildren {
  AuthenticatedClerkRoute: typeof AuthenticatedClerkRoute
  AuthenticatedOrpcTodoRoute: typeof AuthenticatedOrpcTodoRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedClerkRoute: AuthenticatedClerkRoute,
  AuthenticatedOrpcTodoRoute: AuthenticatedOrpcTodoRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
